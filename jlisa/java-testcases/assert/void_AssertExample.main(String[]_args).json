{"name":"void AssertExample::main(String[] args)","description":null,"nodes":[{"id":0,"subNodes":[1,2],"text":"number = -(5)"},{"id":1,"text":"number"},{"id":2,"subNodes":[3],"text":"-(5)"},{"id":3,"text":"5"},{"id":4,"subNodes":[5],"text":"assert(true)"},{"id":5,"text":"true"},{"id":6,"subNodes":[7,10],"text":"assert(>(number, 0), \"\"Number must be non-negative\"\")"},{"id":7,"subNodes":[8,9],"text":">(number, 0)"},{"id":8,"text":"number"},{"id":9,"text":"0"},{"id":10,"text":"\"\"Number must be non-negative\"\""},{"id":11,"text":"ret"}],"edges":[{"sourceId":0,"destId":4,"kind":"SequentialEdge"},{"sourceId":4,"destId":6,"kind":"SequentialEdge"},{"sourceId":6,"destId":11,"kind":"SequentialEdge"}],"descriptions":[{"nodeId":0,"description":{"expressions":["number"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":1,"description":{"expressions":["number"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]"}}}},{"nodeId":2,"description":{"expressions":["- 5"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]"}}}},{"nodeId":3,"description":{"expressions":["5"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]"}}}},{"nodeId":4,"description":{"expressions":["it.unive.jlisa.program.cfg.statement.asserts.SimpleAssert$1@6569dded true"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":5,"description":{"expressions":["true"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":6,"description":{"expressions":["it.unive.jlisa.program.cfg.statement.asserts.AssertionStatement$1@7c9b78e3 number > 0","it.unive.jlisa.program.cfg.statement.asserts.AssertionStatement$2@5491f68b \"\"Number must be non-negative\"\""],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":7,"description":{"expressions":["number > 0"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":8,"description":{"expressions":["number"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":9,"description":{"expressions":["0"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":10,"description":{"expressions":["\"\"Number must be non-negative\"\""],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}},{"nodeId":11,"description":{"expressions":["skip"],"state":{"heap":{"args":["heap[s]:pp@'Assert.java':2:28"]},"type":{"args":["String[]*"],"heap[s]:pp@'Assert.java':2:28":["String[]"],"heap[s]:pp@'Assert.java':2:28[len]":["int"],"number":["int"]},"value":{"heap[s]:pp@'Assert.java':2:28[len]":"[-Inf, +Inf]","number":"[-5, -5]"}}}}]}