package it.unive.jlisa.program;

import it.unive.jlisa.program.cfg.SyntheticCodeLocation;

/**
 * Manages synthetic code locations for statements generated by the front-end
 * that are not actually present in the original source code. This class provides
 * a way to assign unique locations to compiler-generated or transformed statements
 * without interfering with real source code locations.
 *
 * <p>Synthetic locations use an offset-based system rather than line/column
 * coordinates, ensuring they remain distinct from actual source positions.
 * This is particularly useful for intermediate representations, compiler
 * transformations, and generated code that needs location tracking for
 * debugging or analysis purposes.</p>
 *
 */
public class SyntheticCodeLocationManager {

    /** The path or name of the source file associated with synthetic locations */
    private String sourceFile;

    /** The current offset used for generating synthetic locations */
    private int currentOffset;

    /** The current synthetic location managed by this instance */
    private SyntheticCodeLocation currentLocation;

    /** The root synthetic location representing the starting position */
    private SyntheticCodeLocation rootLocation;

    /**
     * Constructs a new SyntheticCodeLocationManager starting at offset 0.
     * Both the current and root locations are initialized to the same
     * starting position.
     *
     * @param sourceFile the path or name of the source file to associate
     *                   with synthetic locations
     */
    public SyntheticCodeLocationManager(String sourceFile) {
        this.sourceFile = sourceFile;
        this.currentOffset = 0;
        this.currentLocation = new SyntheticCodeLocation(sourceFile, currentOffset);
        this.rootLocation = new SyntheticCodeLocation(sourceFile, currentOffset);
    }

    /**
     * Returns the root synthetic location where this manager was initialized.
     * This represents the starting point for synthetic code generation.
     *
     * @return the root SyntheticCodeLocation object
     */
    public SyntheticCodeLocation getRoot() {
        return rootLocation;
    }

    /**
     * Returns the current synthetic location managed by this instance.
     * This location reflects the most recent position after any
     * advancement operations.
     *
     * @return the current SyntheticCodeLocation
     */
    public SyntheticCodeLocation getCurrentLocation() {
        return currentLocation;
    }

    /**
     * Advances to the next synthetic location by incrementing the offset.
     * Creates and returns a new synthetic location at the advanced position,
     * updating the current location state.
     *
     * <p>This method should be called when generating a new synthetic
     * statement that requires a unique location identifier.</p>
     *
     * @return the new current SyntheticCodeLocation after advancing
     */
    public SyntheticCodeLocation nextLocation() {
        this.currentOffset += 1;
        this.currentLocation = new SyntheticCodeLocation(sourceFile, currentOffset);
        return this.currentLocation;
    }

    /**
     * Creates and returns a SyntheticCodeLocation for the specified offset
     * without modifying the current position of this manager. This method
     * allows creation of synthetic locations at arbitrary positions.
     *
     * @param offset the offset value for the requested synthetic location
     * @return a new SyntheticCodeLocation at the specified offset
     */
    public SyntheticCodeLocation getLocation(int offset) {
        return new SyntheticCodeLocation(sourceFile, offset);
    }
}
